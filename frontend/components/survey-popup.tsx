"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { CheckCircle, ChevronRight } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"

interface SurveyPopupProps {
  isOpen: boolean
  onClose: () => void
  appointmentType?: "practitioner" | "clinic"
  selectedId?: string
  selectedService?: string
  date?: Date
  time?: string
  name?: string
  phone?: string
  notes?: string
  isOnline?: boolean
}

// Danh s√°ch c√°c t·ªânh th√†nh Vi·ªát Nam
const provinces = [
  "H√† N·ªôi",
  "TP H·ªì Ch√≠ Minh",
  "ƒê√† N·∫µng",
  "H·∫£i Ph√≤ng",
  "C·∫ßn Th∆°",
  "An Giang",
  "B√† R·ªãa - V≈©ng T√†u",
  "B·∫Øc Giang",
  "B·∫Øc K·∫°n",
  "B·∫°c Li√™u",
  "B·∫Øc Ninh",
  "B·∫øn Tre",
  "B√¨nh ƒê·ªãnh",
  "B√¨nh D∆∞∆°ng",
  "B√¨nh Ph∆∞·ªõc",
  "B√¨nh Thu·∫≠n",
  "C√† Mau",
  "Cao B·∫±ng",
  "ƒê·∫Øk L·∫Øk",
  "ƒê·∫Øk N√¥ng",
  "ƒêi·ªán Bi√™n",
  "ƒê·ªìng Nai",
  "ƒê·ªìng Th√°p",
  "Gia Lai",
  "H√† Giang",
  "H√† Nam",
  "H√† Tƒ©nh",
  "H·∫£i D∆∞∆°ng",
  "H·∫≠u Giang",
  "H√≤a B√¨nh",
  "H∆∞ng Y√™n",
  "Kh√°nh H√≤a",
  "Ki√™n Giang",
  "Kon Tum",
  "Lai Ch√¢u",
  "L√¢m ƒê·ªìng",
  "L·∫°ng S∆°n",
  "L√†o Cai",
  "Long An",
  "Nam ƒê·ªãnh",
  "Ngh·ªá An",
  "Ninh B√¨nh",
  "Ninh Thu·∫≠n",
  "Ph√∫ Th·ªç",
  "Ph√∫ Y√™n",
  "Qu·∫£ng B√¨nh",
  "Qu·∫£ng Nam",
  "Qu·∫£ng Ng√£i",
  "Qu·∫£ng Ninh",
  "Qu·∫£ng Tr·ªã",
  "S√≥c TrƒÉng",
  "S∆°n La",
  "T√¢y Ninh",
  "Th√°i B√¨nh",
  "Th√°i Nguy√™n",
  "Thanh H√≥a",
  "Th·ª´a Thi√™n Hu·∫ø",
  "Ti·ªÅn Giang",
  "Tr√† Vinh",
  "Tuy√™n Quang",
  "Vƒ©nh Long",
  "Vƒ©nh Ph√∫c",
  "Y√™n B√°i",
]

// C√°c nh√≥m tu·ªïi
const ageGroups = ["D∆∞·ªõi 18 tu·ªïi", "18-24 tu·ªïi", "25-34 tu·ªïi", "35-44 tu·ªïi", "45-54 tu·ªïi", "55-64 tu·ªïi", "Tr√™n 65 tu·ªïi"]

// C√°c l·ª±a ch·ªçn gi·ªõi t√≠nh
const genderOptions = ["Nam", "N·ªØ", "Kh√°c", "Kh√¥ng mu·ªën tr·∫£ l·ªùi"]

export function SurveyPopup({
  isOpen,
  onClose,
  selectedId = "",
  selectedService = "",
  date,
  time = "",
  name = "",
  phone = "",
  notes = "",
}: SurveyPopupProps) {
  const [step, setStep] = useState<"survey" | "thanks">("survey")
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [submitted, setSubmitted] = useState(false)
  const [answers, setAnswers] = useState({
    experience: "",
    consultationType: "",
    price: "",
    expectation: [] as string[], // Thay ƒë·ªïi th√†nh m·∫£ng ƒë·ªÉ l∆∞u nhi·ªÅu l·ª±a ch·ªçn
    feedback: "",
    province: "",
    ageGroup: "",
    gender: "",
    selectedId,
    selectedService,
    date: date?.toISOString() || "",
    time,
    name,
    phone,
    notes,
  })

  useEffect(() => {
    setAnswers((prev) => ({
      ...prev,
      selectedId,
      selectedService,
      date: date?.toISOString() || "",
      time,
      name,
      phone,
      notes,
    }))
  }, [selectedId, selectedService, date, time, name, phone, notes])

  const handleChange = (question: keyof typeof answers, value: string | string[]) => {
    setAnswers((prev) => ({ ...prev, [question]: value }))
  }

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn/b·ªè ch·ªçn m·ªôt l·ª±a ch·ªçn trong c√¢u h·ªèi checkbox
  const handleCheckboxChange = (option: string, checked: boolean) => {
    if (checked) {
      // Th√™m l·ª±a ch·ªçn v√†o m·∫£ng
      setAnswers((prev) => ({
        ...prev,
        expectation: [...prev.expectation, option],
      }))
    } else {
      // X√≥a l·ª±a ch·ªçn kh·ªèi m·∫£ng
      setAnswers((prev) => ({
        ...prev,
        expectation: prev.expectation.filter((item) => item !== option),
      }))
    }
  }

  const questions = [
    {
      id: "province",
      title: "B·∫°n ƒëang ·ªü t·ªânh th√†nh n√†o?",
      type: "select",
      options: provinces,
    },
    {
      id: "ageGroup",
      title: "ƒê·ªô tu·ªïi c·ªßa b·∫°n?",
      type: "select",
      options: ageGroups,
    },
    {
      id: "gender",
      title: "Gi·ªõi t√≠nh c·ªßa b·∫°n?",
      type: "radio",
      options: genderOptions,
    },
    {
      id: "experience",
      title: "B·∫°n ƒë√£ t·ª´ng kh√°m ch·ªØa b·∫±ng ƒê√¥ng y ch∆∞a?",
      type: "radio",
      options: ["R·ªìi", "Ch∆∞a", "Th·ªânh tho·∫£ng"],
    },
    {
      id: "consultationType",
      title: "N·∫øu ƒë∆∞·ª£c ch·ªçn, b·∫°n mong mu·ªën h√¨nh th·ª©c t∆∞ v·∫•n n√†o?",
      type: "radio",
      options: ["G·ªçi video v·ªõi th·∫ßy thu·ªëc", "Nh·∫Øn tin tr∆∞·ªõc", "T∆∞ v·∫•n qua Zalo"],
    },
    {
      id: "price",
      title: "B·∫°n s·∫µn s√†ng chi tr·∫£ bao nhi√™u cho 1 l·∫ßn t∆∞ v·∫•n (20-30 ph√∫t)?",
      type: "radio",
      options: ["D∆∞·ªõi 50.000ƒë", "50.000‚Äì100.000ƒë", "100.000‚Äì200.000ƒë", "Tr√™n 200.000ƒë", "C·∫ßn mi·ªÖn ph√≠"],
    },
    {
      id: "expectation",
      title: "B·∫°n mong mu·ªën ƒëi·ªÅu g√¨ nh·∫•t ·ªü m·ªôt th·∫ßy thu·ªëc? (C√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
      type: "checkbox", // Thay ƒë·ªïi type th√†nh checkbox
      options: [
        "C√≥ b·∫±ng c·∫•p r√µ r√†ng/ Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ",
        "Kinh nghi·ªám l√¢u nƒÉm",
        "Ph·∫£n h·ªìi nhanh, d·ªÖ ti·∫øp c·∫≠n",
        "C√≥ ph√≤ng kh√°m uy t√≠n",
        "T·∫≠n t√¢m, d·ªÖ hi·ªÉu",
        "ƒê∆∞·ª£c ng∆∞·ªùi quen gi·ªõi thi·ªáu/ C√≥ nhi·ªÅu ng∆∞·ªùi tin t∆∞·ªüng",
      ],
    },
    {
      id: "feedback",
      title:
        "B·∫°n nghƒ© vi·ªác ƒë·ªÉ l·∫°i nh·∫≠n x√©t c√¥ng khai sau khi ƒë∆∞·ª£c t∆∞ v·∫•n c√≥ gi√∫p √≠ch cho c·ªông ƒë·ªìng v√† ch√≠nh b·∫°n kh√¥ng?",
      type: "radio",
      options: [
        "R·∫•t c√≥ √≠ch ‚Äì gi√∫p m√¨nh v√† ng∆∞·ªùi kh√°c ch·ªçn t·ªët h∆°n",
        "C√≥ th·ªÉ, n·∫øu th·∫ßy thu·ªëc th·ª±c s·ª± n·ªïi b·∫≠t",
        "M√¨nh kh√¥ng quan t√¢m l·∫Øm",
        "Kh√¥ng ph√π h·ª£p v√¨ kh√°m b·ªánh l√† chuy·ªán ri√™ng t∆∞",
      ],
    },
  ]

  const currentQ = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion((prev) => prev + 1)
    } else {
      handleSubmit()
    }
  }

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion((prev) => prev - 1)
    }
  }

  const canProceed = () => {
    const currentId = currentQ.id as keyof typeof answers
    if (currentId === "expectation") {
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ch·ªçn √≠t nh·∫•t m·ªôt l·ª±a ch·ªçn ch∆∞a
      return answers.expectation.length > 0
    }
    return !!answers[currentId]
  }

  const handleSubmit = async () => {
    // Gi·∫£ l·∫≠p g·ª≠i d·ªØ li·ªáu kh·∫£o s√°t
    console.log("G·ª≠i d·ªØ li·ªáu kh·∫£o s√°t:", answers)
    try {
      await fetch(
        "https://script.google.com/macros/s/AKfycbykW0BAqT0_fN9XlNlGqRQhGj18Lzy_mey1RwA9ya165bapIMMbn-eDN7sa3prJlwid/exec",
        {
          method: "POST",
          mode: "no-cors",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(answers),
        },
      )
        .then(() => {
          setSubmitted(true)
        })
        .catch((error) => console.error("Error:", error))
    } catch (error) {
      console.error("G·ª≠i kh√¥ng th√†nh c√¥ng", error)
    }

    // Chuy·ªÉn sang m√†n h√¨nh c·∫£m ∆°n
    setStep("thanks")

    // Sau 5 gi√¢y, ƒë√≥ng popup
    setTimeout(() => {
      onClose()
      // Reset l·∫°i state cho l·∫ßn sau
      setStep("survey")
      setCurrentQuestion(0)
      setAnswers({
        experience: "",
        consultationType: "",
        price: "",
        expectation: [], // Reset th√†nh m·∫£ng r·ªóng
        feedback: "",
        province: "",
        ageGroup: "",
        gender: "",
        selectedId,
        selectedService,
        date: date?.toISOString() || "",
        time,
        name,
        phone,
        notes,
      })
    }, 15000)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:w-2/3 w-[95%] max-w-3xl p-0 overflow-hidden bg-white rounded-xl">
        <DialogHeader className="bg-[#16a34a]/10 pb-4 pt-6">
          <DialogTitle className="text-center text-xl text-[#16a34a]">
            {step === "survey" ? "üéØ Ch·ªâ v√†i gi√¢y n·ªØa th√¥i!" : "B·∫°n ƒë√£ ho√†n t·∫•t ƒëƒÉng k√Ω!"}
          </DialogTitle>
          {step === "survey" && (
            <div className="px-6 mt-2">
              <p className="text-center text-gray-600 mb-3">H√£y gi√∫p ch√∫ng t√¥i hi·ªÉu r√µ b·∫°n h∆°n ƒë·ªÉ ph·ª•c v·ª• t·ªët h∆°n:</p>
              <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden">
                <div
                  className="bg-[#16a34a] h-full transition-all duration-300 ease-in-out"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <div className="text-right text-sm text-gray-500 mt-1">
                {currentQuestion + 1}/{questions.length}
              </div>
            </div>
          )}
        </DialogHeader>

        {step === "survey" ? (
          <Card className="border-0 shadow-none">
            <CardContent className="p-4 sm:p-6 min-h-[300px] flex flex-col justify-between">
              <div className="space-y-6">
                <div className="bg-[#16a34a]/5 p-5 rounded-lg">
                  <h3 className="font-medium text-[#16a34a] text-base sm:text-lg mb-4">{currentQ.title}</h3>

                  {currentQ.type === "select" ? (
                    <Select
                      value={answers[currentQ.id as keyof typeof answers] as string}
                      onValueChange={(value) => handleChange(currentQ.id as keyof typeof answers, value)}
                    >
                      <SelectTrigger className="w-full border-[#16a34a]/30 focus:ring-[#16a34a]/20">
                        <SelectValue placeholder="Ch·ªçn m·ªôt gi√° tr·ªã" />
                      </SelectTrigger>
                      <SelectContent className="max-h-[300px]">
                        {currentQ.options.map((option) => (
                          <SelectItem key={option} value={option}>
                            {option}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : currentQ.type === "checkbox" ? (
                    <div className="space-y-3">
                      {currentQ.options.map((option) => (
                        <div
                          key={option}
                          className="flex items-center space-x-2 p-2 sm:p-3 rounded-lg hover:bg-[#16a34a]/10 transition-colors"
                        >
                          <Checkbox
                            id={`${currentQ.id}-${option}`}
                            checked={answers.expectation.includes(option)}
                            onCheckedChange={(checked) => handleCheckboxChange(option, checked as boolean)}
                            className="text-[#16a34a] border-[#16a34a] data-[state=checked]:bg-[#16a34a] data-[state=checked]:text-white"
                          />
                          <Label htmlFor={`${currentQ.id}-${option}`} className="cursor-pointer w-full">
                            {option}
                          </Label>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <RadioGroup
                      value={answers[currentQ.id as keyof typeof answers] as string}
                      onValueChange={(value) => handleChange(currentQ.id as keyof typeof answers, value)}
                      className="space-y-3"
                    >
                      {currentQ.options.map((option) => (
                        <div
                          key={option}
                          className="flex items-center space-x-2 p-2 sm:p-3 rounded-lg hover:bg-[#16a34a]/10 transition-colors"
                        >
                          <RadioGroupItem
                            value={option}
                            id={`${currentQ.id}-${option}`}
                            className="text-[#16a34a] border-[#16a34a]"
                          />
                          <Label htmlFor={`${currentQ.id}-${option}`} className="cursor-pointer w-full">
                            {option}
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  )}
                </div>
              </div>
            </CardContent>
            <CardFooter className="bg-[#16a34a]/5 p-4 sm:p-6 flex justify-between">
              <Button
                variant="outline"
                onClick={prevQuestion}
                disabled={currentQuestion === 0}
                className="border-[#16a34a] text-[#16a34a] hover:bg-[#16a34a]/10 text-xs sm:text-sm px-2 sm:px-4"
              >
                Quay l·∫°i
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={!canProceed()}
                className="bg-[#16a34a] hover:bg-[#16a34a]/90 text-xs sm:text-sm px-2 sm:px-4"
              >
                {currentQuestion < questions.length - 1 ? (
                  <span className="flex items-center">
                    Ti·∫øp theo <ChevronRight className="ml-1 h-4 w-4" />
                  </span>
                ) : (
                  "G·ª≠i ph·∫£n h·ªìi"
                )}
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <Card className="border-0 shadow-none">
            <CardContent className="pt-6 sm:pt-8 pb-6 sm:pb-8 px-4 sm:px-6">
              <div className="text-center space-y-5">
                <div className="flex justify-center">
                  <div className="bg-[#16a34a]/10 p-4 rounded-full">
                    <CheckCircle className="h-8 w-8 sm:h-12 sm:w-12 text-[#16a34a]" />
                  </div>
                </div>
                <h2 className="text-xl sm:text-2xl font-bold text-[#16a34a]">üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω tr·∫£i nghi·ªám!</h2>
                <p className="text-gray-600">Ch√∫ng t√¥i s·∫Ω li√™n h·ªá trong 1‚Äì2 ng√†y t·ªõi n·∫øu b·∫°n thu·ªôc nh√≥m ph√π h·ª£p.</p>
                <div className="pt-3 space-y-3 bg-[#16a34a]/5 p-4 rounded-lg">
                  <p className="font-medium">üëâ Theo d√µi fanpage ƒë·ªÉ nh·∫≠n c√°c ƒë·ª£t t∆∞ v·∫•n m·ªõi nh·∫•t!</p>
                  <p className="font-medium">
                    üëâ T√¨m hi·ªÉu th√™m v·ªÅ LangConnect{" "}
                    <a href="https://www.facebook.com/profile.php?id=61575814304088" className="text-[#16a34a] hover:underline font-semibold">
                      t·∫°i ƒë√¢y
                    </a>
                    .
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </DialogContent>
    </Dialog>
  )
}
